#version=RHEL7
# System authorization information
auth --enableshadow --passalgo=sha512
# Install OS instead of upgrade
install
# Reboot after installation
reboot
# Use network installation
url --url="http://172.25.254.250/rhel7.0/x86_64/dvd"
# Firewall configuration
firewall --disabled
firstboot --disable
ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information
network  --bootproto=static --device=p2p2 --gateway=172.25.254.254 --hostname=foundation1.ilt.example.com --ip=172.25.254.1 --nameserver=172.25.254.250 --netmask=255.255.255.0
network  --bootproto=dhcp --device=wlp3s0 --onboot=off
# Root password
rootpw --iscrypted $6$oZ1JGQiQ$0lau6DEHSV81iQ54SJyjhI7s9DvAz2Ly5JVwGxMXJqDodk61DXZnF79ibX.scEeHKIe1tBTqLSCIfYV2k3AuW1
# SELinux configuration
selinux --enforcing
# System services
services --disabled="kdump,network" --enabled="chronyd"
# System timezone
timezone Asia/Kolkata --isUtc
user --name=kiosk --password=redhat
# X Window System configuration information
xconfig  --startxonboot
# System bootloader configuration
bootloader --location=mbr --boot-drive=sda
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all  --drives=sda
# Disk partitioning information
part swap --fstype="swap" --ondisk=sda --size=7951
part / --asprimary --fstype="xfs" --ondisk=sda --size=945917 --fsoptions="nobarrier"

%pre
(
set -x

echo "$(date): Beginning pre script..." | tee /dev/tty8

# ----------------------------------------------------------------
# display /proc/cmdline in log
# ----------------------------------------------------------------
echo "The /proc/cmdline...." | tee /dev/tty8
cat /proc/cmdline | tee /dev/tty8

# ----------------------------------------------------------------
# identify enrollment/station
# ----------------------------------------------------------------
echo "RHT_VENUE=ilt" > /tmp/rht
cat /proc/cmdline | grep -o "RHT_ENROLLMENT=[0-9]*" >> /tmp/rht
ROLE="foundation"
if (egrep -i 'build' /proc/cmdline); then
    ROLE=$(sed -r -e 's/.*\<(build.*)\>.*/\L\1/i' /proc/cmdline)
fi
echo "RHT_ROLE=${ROLE}" >> /tmp/rht
COURSE=""
if (egrep -i '(rh[ds]?|jb|cl)[0-9]{1,3}' /proc/cmdline); then
    COURSE=$(sed -r -e 's/.*\<((rh[ds]?|jb|cl)[0-9]{1,3})\>.*/\L\1/i' /proc/cmdline)
fi
# Verify course is on the USB
if ! $( ls /run/install/isodir/manifests/${COURSE^^}-*.icmf &>/dev/null ) ; then
    echo "Invalid course ${COURSE} specified" | tee /dev/tty8
    COURSE=""
fi
echo "RHT_COURSE=${COURSE,,}" >> /tmp/rht
echo "RHT_TITLE=" >> /tmp/rht
echo "RHT_VMS=" >> /tmp/rht
echo "RHT_MAXSTATIONS=20" >> /tmp/rht
source /tmp/rht
[[ "${RHT_ENROLLMENT}" -eq 0 ]] && echo "RHT_VM0=" >> /tmp/rht

RHTINST_MOUNT=/content
RHEL_RELEASE=rhel7.0
RHELH_TREE=${RHEL_RELEASE}/x86_64
cat > /tmp/rht-ksvars <<-EOF
COURSE=${COURSE,,}
RHTINST_MOUNT=${RHTINST_MOUNT}
RHEL_RELEASE=${RHEL_RELEASE}
RHELH_TREE=${RHELH_TREE}
EOF

echo "RHT_VMTREE=${RHELH_TREE}" >> /tmp/rht

if (egrep -i 'LABEL=RHTINST' /proc/cmdline); then
    echo "RHT_INSTALLSOURCE=cdrom" >> /tmp/rht-ksvars
else
    echo "RHT_INSTALLSOURCE=pxe" >> /tmp/rht-ksvars
fi

source /tmp/rht-ksvars

touch /tmp/rht-packages

# ----------------------------------------------------------------
# generate all partitioning lines which allocate disk space
# ----------------------------------------------------------------
# the primary disk is where all of the physical allocations take place.  
# if we are not careful, Anaconda might allocate partitions on the
# instructor USB drive.  You would like to think we could just say 
# "ignoredisk <instructor USB disk>", but then Anaconda will not read the 
# installer off of it.
# CANDIDATES = physical disks (disks that do not end in a number)
# SRCDISK    = disk that contains the LABEL='RHTINST' partition
# MAINDISK   = calculated main disk
CANDIDATES=$(ls /sys/block | grep -v "[0-9]$")
SRCDISK=$(blkid -t LABEL=RHTINST | sed -e 's:^/dev/::' -e 's/[0-9].*//')

for d in $CANDIDATES; do
        grep -q 1 /sys/block/$d/removable && continue
        [ "$d" = "$SRCDISK" ] && continue
        MAINDISK=$d
        break
done

echo "RHT: Using $MAINDISK as primary disk" | tee /dev/tty8
echo "RHT: Using $SRCDISK as source disk" | tee /dev/tty8
echo "MAINDISK=$MAINDISK" >> /tmp/rht-ksvars

cat > /tmp/rht-ksconfig <<-EOF
bootloader --location=mbr --boot-drive=$MAINDISK
clearpart --all --drives=$MAINDISK
zerombr
part / --fstype=xfs --size=80000 --asprimary --grow --fsoptions="nobarrier" --ondisk $MAINDISK
part swap --recommended --ondisk $MAINDISK
EOF

# ----------------------------------------------------------------
# add appropriate network lines
# ----------------------------------------------------------------
[ ${RHT_ENROLLMENT} -ne 0 ] && N=${RHT_ENROLLMENT} || N=250

# For some more troubleshooting of following NICs
ip a | grep '^[23]:'
# Try to follow the first UP interface unless both are DOWN
if (ip a | grep -q '^2:.*:.*state UP') ; then
    NIC1=$(ip a | sed -n -e '/^2:.*:/s/2:[ \t]*\(.*\):.*/\1/p')
    NIC2=$(ip a | sed -n -e '/^3:.*:/s/3:[ \t]*\(.*\):.*/\1/p')
elif (ip a | grep -q '^3:.*:.*state UP') ; then
    NIC1=$(ip a | sed -n -e '/^3:.*:/s/3:[ \t]*\(.*\):.*/\1/p')
    NIC2=$(ip a | sed -n -e '/^2:.*:/s/2:[ \t]*\(.*\):.*/\1/p')
else
    NIC1=$(ip a | sed -n -e '/^2:.*:/s/2:[ \t]*\(.*\):.*/\1/p')
    NIC2=$(ip a | sed -n -e '/^3:.*:/s/3:[ \t]*\(.*\):.*/\1/p')
fi
#NIC1=$(ip a | sed -n -e '/^[23]:.*:.*state UP/s/.:[ \t]*\(.*\):.*/\1/p')
#NIC2=$(ip a | sed -n -e '/^[23]:.*:.*state DOWN/s/.:[ \t]*\(.*\):.*/\1/p')
echo "NIC1=${NIC1}" >> /tmp/rht-ksvars
echo "NIC2=${NIC2}" >> /tmp/rht-ksvars

NICACTIVATE="" && [[ "${RHT_INSTALLSOURCE}" = "cdrom" ]] && NICACTIVATE="--activate"

cat >> /tmp/rht-ksconfig <<-EOF
network --bootproto=static --ip=172.25.254.${N} --netmask=255.255.255.0 --gateway=172.25.254.254 --nameserver=172.25.254.250 --device=${NIC1} --hostname=foundation${RHT_ENROLLMENT}.ilt.example.com ${NICACTIVATE}
EOF
if [ -n "$NIC2" ] ; then
    if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
        cat >> /tmp/rht-ksconfig <<-EOF
network --bootproto=dhcp --device=${NIC2}
EOF
    else
        cat >> /tmp/rht-ksconfig <<-EOF
network --bootproto=dhcp --device=${NIC2} --onboot=no
EOF
    fi
fi
# ----------------------------------------------------------------
# foundationX: add reboot
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -ne 0 ] ; then
    echo "Adding reboot to instruction list..." | tee /dev/tty8
    cat >> /tmp/rht-ksconfig <<-EOF
reboot
EOF
fi

# ----------------------------------------------------------------
# foundation0: set default keyboard and language
# foundationX: download keyboard, lang, and timezone
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    # These lines have to be tab indented to avoid later processing of
    # /root/anaconda-ks.cfg to extract keyboard and lang
    cat >> /tmp/rht-ksconfig <<-EOF
	keyboard --vckeymap=us --xlayouts='us'
	lang en_US.UTF-8
	EOF
else
    echo "Downloading keyboard, lang, and timezone..." | tee /dev/tty8
    wget -O /tmp/rht-locale http://172.25.254.250/ks/rht-locale | tee /dev/tty8
    if $(grep keyboard /tmp/rht-locale &>/dev/null) ; then
        cat /tmp/rht-locale >> /tmp/rht-ksconfig
    fi
fi

# ----------------------------------------------------------------
# foundation0: add packages
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    echo "Adding foundation0 packages to package list..." | tee /dev/tty8
    cat >> /tmp/rht-packages <<-EOF
createrepo
PyYAML
EOF

fi

# ----------------------------------------------------------------
# End of pre script
# ----------------------------------------------------------------
echo "$(date): Pre script complete." | tee /dev/tty8

) > /tmp/rht-ks-pre.log 2>&1

%end

%post --nochroot
(
set -x

chvt 8

echo "$(date): Beginning post nochroot script..." | tee /dev/tty8

# ----------------------------------------------------------------
# migrate all pre logging/files to /mnt/sysimage
# ----------------------------------------------------------------
cp /tmp/rht-ks-pre.log /mnt/sysimage/root/rht-ks-pre.log
cp /tmp/rht /mnt/sysimage/etc/rht
cp /tmp/rht-ksvars /mnt/sysimage/etc/rht-ksvars

source /tmp/rht
source /tmp/rht-ksvars

# ----------------------------------------------------------------
# foundation0: make usb available to chroot'd environment
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    [ ! -d /mnt/sysimage/run/install/isodir ] && mkdir -p /mnt/sysimage/run/install/isodir
    mount --bind /run/install/isodir /mnt/sysimage/run/install/isodir
fi

# ----------------------------------------------------------------
# foundation0: copy ks files from usb media to /mnt/sysimage
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    mkdir -p /mnt/sysimage${RHTINST_MOUNT}
    cp -a /run/install/isodir/boot/ks /mnt/sysimage${RHTINST_MOUNT}
    mv /mnt/sysimage${RHTINST_MOUNT}/ks/rht-usb /mnt/sysimage/usr/local/bin/
    chmod +x /mnt/sysimage/usr/local/bin/rht-usb
fi

# ----------------------------------------------------------------
# End of post nochroot script
# ----------------------------------------------------------------
echo "$(date): Post nochroot script complete." | tee /dev/tty8

chvt 6

) > /mnt/sysimage/root/rht-ks-post.log 2>&1

%end

%post
(
set -x

chvt 8

echo "$(date): Beginning post script..." | tee /dev/tty8

# ----------------------------------------------------------------
# Identify enrollment/station
# ----------------------------------------------------------------
source /etc/rht
[ ${RHT_ENROLLMENT} -ne 0 ] && N=${RHT_ENROLLMENT} || N=250
source /etc/rht-ksvars

# ----------------------------------------------------------------
# Remove nobarrier option from fstab
# ----------------------------------------------------------------
sed -i -e 's/nobarrier/defaults/' /etc/fstab

# ----------------------------------------------------------------
# foundation0: copy the hypervisor layer files from RHTINST
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then

    echo "Copying RHEL Hypervisor (${RHEL_RELEASE}) source to local drive..." | tee /dev/tty8
    echo | tee /dev/tty8

    /usr/local/bin/rht-usb courseusb RHCIfoundation | tee /dev/tty8

fi

# ----------------------------------------------------------------
# set up bridge br0
# ----------------------------------------------------------------

# FIXME: RHEL 7 beta (20131127.1) is creating extraneous ifcfg file
#        that is getting in the way of starting the first interface
#        on foundation0.
if [ -f /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1 ] ; then
    rm /etc/sysconfig/network-scripts/ifcfg-Wired_connection_1
fi

# Create bridge interface file.
cat > /etc/sysconfig/network-scripts/ifcfg-br0 <<-EOF
# Bridge Networking Interface
DEVICE=br0
NAME="Bridge ${NIC1}"
ONBOOT=yes
BOOTPROTO=none
IPADDR0=172.25.254.${N}
PREFIX0=24
GATEWAY0=172.25.254.254
DEFROUTE=yes
IPADDR1=172.25.${RHT_ENROLLMENT}.250
PREFIX1=24
DNS1=172.25.254.250
DOMAIN="ilt.example.com example.com"
IPV6INIT=no
PEERNTP=no
PEERDNS=yes
TYPE=Bridge
DELAY=0
STP=no
EOF

if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    # Create bridge interface file.
    cat > /etc/sysconfig/network-scripts/ifcfg-br0:253 <<-EOF
# Bridge Networking Interface
DEVICE=br0:253
NAME="Bridge ${NIC1}"
ONPARENT=yes
BOOTPROTO=none
IPADDR=172.25.253.${N}
PREFIX=24
IPV6INIT=no
EOF
fi

# Attach NIC1 to the bridge br0
HWADDRLINE=$(grep HWADDR /etc/sysconfig/network-scripts/ifcfg-${NIC1} | tr -d '"')
UUIDLINE=$(grep UUID /etc/sysconfig/network-scripts/ifcfg-${NIC1} | tr -d '"')
cat > /etc/sysconfig/network-scripts/ifcfg-${NIC1} <<-EOF
DEVICE=${NIC1}
BOOTPROTO=none
${HWADDRLINE}
${UUIDLINE}
BRIDGE=br0
ONBOOT=yes
TYPE=Ethernet
NAME="System ${NIC1}"
EOF



# ----------------------------------------------------------------
# foundation0: set up bridge br1
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    # Create bridge interface file.
    cat > /etc/sysconfig/network-scripts/ifcfg-br1 <<-EOF
# Bridge Networking Interface
DEVICE=br1
ONBOOT=yes
BOOTPROTO=none
USERCTL=yes
IPV6INIT=no
PEERNTP=no
PEERDNS=no
TYPE=Bridge
DELAY=0
STP=no
NAME="Bridge ${NIC2}"
EOF

    if [ -n "${NIC2}" ] ; then
        if [ -f /etc/sysconfig/network-scripts/ifcfg-${NIC2} ] ; then
            # Attach NIC2 to the bridge br1
            HWADDRLINE=$(grep HWADDR /etc/sysconfig/network-scripts/ifcfg-${NIC2} | tr -d '"')
            UUIDLINE=$(grep UUID /etc/sysconfig/network-scripts/ifcfg-${NIC2} | tr -d '"')
            cat > /etc/sysconfig/network-scripts/ifcfg-${NIC2} <<-EOF
DEVICE=${NIC2}
BOOTPROTO=none
${HWADDRLINE}
${UUIDLINE}
BRIDGE=br1
ONBOOT=yes
TYPE=Ethernet
NAME="System ${NIC2}"
EOF
        fi
    fi
fi

# ----------------------------------------------------------------
# set up bridge virbr1
# ----------------------------------------------------------------
cat > "/etc/libvirt/qemu/networks/privnet.xml" <<-EOF
<network ipv6='yes'>
  <name>privnet</name>
  <bridge name="virbr1" />
</network>
EOF
ln -s ../privnet.xml /etc/libvirt/qemu/networks/autostart/privnet.xml

# ----------------------------------------------------------------
# foundation0: setup local software repos
# foundationX: setup software repos
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then

    cat > "/etc/yum.repos.d/rhel-dvd.repo" <<-EOF
[rhel-dvd]
name="Local classroom copy of dvd"
baseurl=file://${RHTINST_MOUNT}/${RHELH_TREE}/dvd
gpgcheck=0
EOF

else

    cat > "/etc/yum.repos.d/rhel-dvd.repo" <<-EOF
[rhel-dvd]
name="Remote classroom copy of dvd"
baseurl=http://172.25.254.250/$RHELH_TREE/dvd
gpgcheck=0
EOF

fi

# ----------------------------------------------------------------
# foundation0: install foundation0-config
# foundationX: install foundation-config
# ----------------------------------------------------------------
if [ ${RHT_ENROLLMENT} -eq 0 ] ; then

    # Since files under extras are manually put there and we cannot
    # trust that the correct RHEL version is used to create the USB
    # stick (sometimes Windows even), we wait to run createrepo until
    # here (creatrepo will not work in post nochroot).
    # FIXME: For some reason umask is 077 in here....
    createrepo -v ${RHTINST_MOUNT}/${RHELH_TREE}/extras | tee /dev/tty8
    chmod -R +r ${RHTINST_MOUNT}/${RHELH_TREE}/extras/repodata
    chmod +x ${RHTINST_MOUNT}/${RHELH_TREE}/extras/repodata

    # While the SELinux context from Kickstart works, anyone making
    # changes afterwards, will be unpleasantly surprised, so let us
    # fix it here.
    semanage fcontext -a -t public_content_t ${RHTINST_MOUNT}'(/.*)?'
    restorecon -RFvv ${RHTINST_MOUNT}

    cat > "/etc/yum.repos.d/rht-extras.repo" <<-EOF
[rht-ext]
name="RHT Extras"
baseurl=file://${RHTINST_MOUNT}/${RHELH_TREE}/extras
gpgcheck=0
EOF

    yum -y install foundation0-config | tee /dev/tty8

else

    cat > "/etc/yum.repos.d/rht-extras.repo" <<-EOF
[rht-ext]
name="RHT Extras"
baseurl=http://172.25.254.250/${RHELH_TREE}/extras
gpgcheck=0
EOF

    yum -y install foundation-config | tee /dev/tty8

fi

# ----------------------------------------------------------------
# foundation0: if builder environment, install additional manifest
# ----------------------------------------------------------------

if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    if echo ${RHT_ROLE} | egrep -i 'build' ; then
        # Copy manifest
        /usr/local/bin/rht-usb courseusb RHCI${RHT_ROLE} | tee /dev/tty8
        # FIXME: For some reason umask is 077 in here....
        createrepo -v ${RHTINST_MOUNT}/${RHELH_TREE}/extras | tee /dev/tty8
        chmod -R +r ${RHTINST_MOUNT}/${RHELH_TREE}/extras/repodata
        chmod +x ${RHTINST_MOUNT}/${RHELH_TREE}/extras/repodata
        yum clean expire-cache | tee /dev/tty8
    fi
fi

# ----------------------------------------------------------------
# foundation0: copy the course files if course code passed as argument
# ----------------------------------------------------------------

if [ ${RHT_ENROLLMENT} -eq 0 ] ; then
    if [ -n "${COURSE}" ] ; then
        /usr/local/bin/rht-usb courseusb ${COURSE} | tee /dev/tty8
        /usr/local/bin/rht-setcourse ${COURSE} | tee /dev/tty8
    fi
fi

# ----------------------------------------------------------------
# End of post script
# ----------------------------------------------------------------
echo "$(date): Post script complete." | tee /dev/tty8

chvt 6

) >> /root/rht-ks-post.log 2>&1

%end

%packages
@base
@console-internet
@core
@gnome-desktop
@internet-browser
@java-platform
@network-file-system-client
@perl-runtime
@virtualization-client
@virtualization-hypervisor
@virtualization-platform
@virtualization-tools
@x11
chrony
mtools
pax

%end

